#include<stdio.h>
#include<stdlib.h>
#include<algorithm>
using namespace std;

typedef struct AVLNode *position;
typedef position AVLTree;
struct AVLNode
{
    int data;
    AVLTree left;
    AVLTree right;
    int height;
};

int GetHeight(AVLTree tree)
{
    if(!tree) return 0;
    else return max(GetHeight(tree->left),GetHeight(tree->right)) + 1;
}

AVLTree SingleLeftRotation(AVLTree A)
{
    AVLTree B = A->left;
    A->left = B->right;
    B->right = A;
    A->height = max(GetHeight(A->left),GetHeight(A->right)) + 1;
    B->height = max(GetHeight(B->left),A->height) + 1;
    return B;
}

AVLTree SingleRightRotation(AVLTree A)
{
    AVLTree B = A->right;
    A->right = B->left;
    B->left = A;
    A->height = max(GetHeight(A->left),GetHeight(A->right)) + 1;
    B->height = max(GetHeight(B->right),A->height) + 1;
    return B;
}

AVLTree LeftRightRotation(AVLTree A)
{
    AVLTree B = A->left;
    AVLTree C = B->right;
    A->left = SingleRightRotation(B);
    return SingleLeftRotation(A);
}

AVLTree RightLeftRotation(AVLTree A)
{
    AVLTree B = A->right;
    AVLTree C = B->left;
    A->right = SingleLeftRotation(B);
    return SingleRightRotation(A);
}

AVLTree Insert(AVLTree A,int X)
{
    if(!A){
        A = (AVLTree)malloc(sizeof(struct AVLNode));
        A->data = X;
        A->left = A->right = NULL;
        A->height = 1;
    }else if(X < A->data){
        A->left = Insert(A->left,X);
        if(GetHeight(A->left) - GetHeight(A->right) == 2){
            if(X < A->left->data){
                A = SingleLeftRotation(A);
            }else A = LeftRightRotation(A);
        }
    }else if(X > A->data){
        A->right = Insert(A->right,X);
         if(GetHeight(A->left) - GetHeight(A->right) == -2){
            if(X > A->right->data){
                A = SingleRightRotation(A);
            }else A = RightLeftRotation(A);
        }
    }
    A->height = max(GetHeight(A->left),GetHeight(A->right)) + 1;
    return A;
}

int main()
{
    AVLTree A;
	int N, i;
	int x;
	A = (AVLTree)malloc(sizeof(struct AVLNode));
	scanf("%d\n", &N);
	scanf("%d", &x);
	A->data = x;
	A->left = A->right = NULL;
	A->height = 0;
	for (i=1; i<N; i++){
		scanf("%d", &x);
		A = Insert(A, x);
	}
	printf("%d\n", A->data );
	return 0;
}
