#includestdio.h

struct TreeNode
{
    char c;
    int left;
    int right;
}T1[10],T2[10];

int BuildTree(struct TreeNode T[])
{
    int N,i,Root = -1;
    char cl,cr;
    scanf(%dn,&N);
    int check[N];
    if(N){
        for(i = 0; i  N; i++) check[i] = 0;
        for(i = 0; i  N; i++){
            scanf(%c %c %c,&T[i].c,&cl,&cr);
            getchar();
            if(cl != '-'){
                T[i].left = cl - '0';
                check[T[i].left] = 1;
            }
            else T[i].left = -1;
            if(cr != '-'){
                T[i].right = cr - '0';
                check[T[i].right] = 1;
            }
            else T[i].right = -1;
        }
        for(i = 0; i  N; i++)
            if(!check[i]) break;
        Root = i;
    }
    return Root;
}

int Isomorphic(int R1, int R2)
{
    if ((R1 == -1) && (R2 == -1)){
        return 1;
    }
    else if ((R1 == -1 && R2 != -1)  (R2 == -1 && R1 != -1)){
        return 0;
    }
    else if (T1[R1].c != T2[R2].c){
        return 0;
    }
    else if (Isomorphic(T1[R1].left, T2[R2].left) && Isomorphic(T1[R1].right, T2[R2].right)) {
        return 1;
    }
    else if (Isomorphic(T1[R1].left, T2[R2].right) && Isomorphic(T1[R1].right, T2[R2].left)){
        return 1;
    }
    return 0;
}

int main()
{
    int R1,R2;
    R1 = BuildTree(T1);
    R2 = BuildTree(T2);
    if(Isomorphic(R1,R2)) printf(Yes);
    else printf(No);
    return 0;
}
