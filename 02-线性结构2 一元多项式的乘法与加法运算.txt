#include<stdio.h>
#include<stdlib.h>

//数据结构设计
typedef struct PolyNode *Polynomial;
struct PolyNode{
    int coef;
    int expon;
    Polynomial link;
};

void Attach(int c,int e,Polynomial *pRear)
{
    Polynomial P;
    P = (Polynomial)malloc(sizeof(struct PolyNode));
    P->coef = c;
    P->expon = e;
    P->link = NULL;
    (*pRear)->link = P;
    *pRear = P;
}

Polynomial ReadPoly()
{
    Polynomial P,Rear,t;
    int N,c,e;
    scanf("%d",&N);
    //链表头空结点
    P = (Polynomial)malloc(sizeof(struct PolyNode));
    P->link = NULL;
    Rear = P;
    while(N--){
        scanf("%d %d",&c,&e);
        Attach(c,e,&Rear);/*将当前项插入多项式尾部*/
    }
    //删除临时生成的头节点
    t = P;
    P = P->link;
    free(t);
    return P;
}

Polynomial Mult(Polynomial P1,Polynomial P2)
{
    Polynomial P,Rear,t1,t2,t;
    int c,e;
    if(!P1 || !P2) return NULL;

    t1 = P1;
    t2 = P2;
    P = (Polynomial)malloc(sizeof(struct PolyNode));
    P->link = NULL;
    Rear = P;
    //先用P1的第一项乘P2，得到P
    while(t2){
        Attach(t1->coef*t2->coef,t1->expon+t2->expon,&Rear);
        t2 = t2->link;
    }
    t1 = t1->link;
    while(t1){
        t2 = P2;
        Rear = P;
        while(t2){
            e = t1->expon + t2->expon;
            c = t1->coef * t2->coef;
            while(Rear->link && Rear->link->expon > e){
                Rear = Rear->link;
            }
            if(Rear->link && Rear->link->expon == e){
                if(Rear->link->coef + c){
                    Rear->link->coef += c;
                }else{
                    t = Rear->link;
                    Rear->link = t->link;
                    free(t);
                }
            }else{
                t = (Polynomial)malloc(sizeof(struct PolyNode));
                t->coef = c;
                t->expon = e;
                t->link = Rear->link;
                Rear->link = t;
                Rear = Rear->link;
            }
            t2 = t2->link;
        }
        t1 = t1->link;
    }
    //删除空结点
    Rear = P;
    P = P->link;
    free(Rear);
    return P;
}

Polynomial Add(Polynomial P1,Polynomial P2)
{
    Polynomial P,Rear,t1,t2,temp;
    t1 = P1;
    t2 = P2;
    P = (Polynomial)malloc(sizeof(struct PolyNode));
    P->link = NULL;
    Rear = P;
    while(t1 && t2){
        temp = (Polynomial)malloc(sizeof(struct PolyNode));
        if(t1->expon == t2->expon){
            if(t1->coef + t2->coef){
                temp->coef = t1->coef+t2->coef;
                temp->expon = t1->expon;
                Rear->link = temp;
                Rear = Rear->link;
                t1 = t1->link;
                t2 = t2->link;
            }else{
                t1 = t1->link;
                t2 = t2->link;
            }
        }else if(t1->expon > t2->expon){
            temp->coef = t1->coef;
            temp->expon = t1->expon;
            Rear->link = temp;
            Rear = Rear->link;
            t1 = t1->link;
        }else{
            temp->coef = t2->coef;
            temp->expon = t2->expon;
            Rear->link = temp;
            Rear = Rear->link;
            t2 = t2->link;
        }
    }
    if(t1){
        Rear->link = t1;
    }else {
        Rear->link = t2;
    }
    Rear=P;
	P=P->link;
	free(Rear);
    return P;
}

void PrintPoly(Polynomial P)
{
    int flag = 0;
    if(!P){printf("0 0\n"); return;}
    while(P){
        if(!flag){
            flag = 1;
        }else{printf(" ");}
        printf("%d %d",P->coef,P->expon);
        P = P->link;
    }
    printf("\n");
}

int main()
{
    Polynomial P1,P2,PP,PS;

    P1 = ReadPoly();
    P2 = ReadPoly();
    PP = Mult(P1,P2);
    PrintPoly(PP);
    PS = Add(P1,P2);
    PrintPoly(PS);

    return 0;
}
