#include<vector>
#include<stdio.h>
using namespace std;

struct Node
{
    int address;
    int n;
    int next;
};

int main()
{
    int first,N,K;
    int add,number,nextadd;
    scanf("%d %d %d",&first,&N,&K);
    vector<Node> data(N + 1);
    for(int i = 1; i <= N; i++){
        scanf("%d %d %d",&add,&number,&nextadd);
        data[i].address = add;
        data[i].n = number;
        data[i].next = nextadd;
    }
    vector<Node> newdata(N + 1);
    int i;
    for(i = 1; i <= N; i++){
        if(first == -1) break;
        for(int j = 1; j <= N; j++){
            if(data[j].address == first){
                newdata[i].address = data[j].address;
                newdata[i].n = data[j].n;
                newdata[i].next = data[j].next;
                first = data[j].next;
                break;
            }
        }
    }
    if(K == 1){
        int z1;
        for(z1 = 1; z1 < i - 1; z1++){
            printf("%05d %d %05d\n",newdata[z1].address,newdata[z1].n,newdata[z1].next);
        }
        printf("%05d %d -1",newdata[z1].address,newdata[z1].n);
    }else{
        int times = (i - 1) / K; // 记录要倒着的轮数
        int cn = 0;
        for(int j = 1; j < i; j++){
            if(cn != times){
                if(j % K == 0){
                    cn = cn + 1;
                    int temp = newdata[j].next;
                    for(int m = j; m > j - K; m--){
                        if(m != j - K + 1){
                            newdata[m].next = newdata[m - 1].address;
                        }
                    }
                    if(times <= 1 || cn == times){
                        newdata[j - K + 1].next = temp;
                    }else if(cn + 1 <= times){
                        newdata[j - K + 1].next = newdata[j + K].address;
                    }
                    for(int m1 = j; m1 > j - K; m1--){
                        if(cn == times && (i-1) % K == 0 && m1 == j - K + 1){
                            printf("%05d %d ",newdata[m1].address,newdata[m1].n);
                            printf("%d",newdata[m1].next);
                        }else{
                            printf("%05d %d %05d\n",newdata[m1].address,newdata[m1].n,newdata[m1].next);
                        }
                    }
                }
            }else{
                if(j != i - 1){
                    printf("%05d %d %05d\n",newdata[j].address,newdata[j].n,newdata[j].next);
                }else{
                    printf("%05d %d %d\n",newdata[j].address,newdata[j].n,newdata[j].next);
                }
            }
        }
    }
    return 0;
}
