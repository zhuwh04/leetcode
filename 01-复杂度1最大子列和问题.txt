#include<iostream>
#include<vector>
using namespace std;

// 方法一暴力解法O(n^2)
int MaxSubArray1(vector<int> nums)
{
    int maxsum = 0;
    for(int i = 0; i < nums.size(); i++){
        int tmp = 0;
        for(int j = i; j < nums.size(); j++){
            tmp = tmp + nums[j];
            if(tmp > maxsum){
                maxsum = tmp;
            }
        }
    }
    return maxsum;
}


// 方法二分而治之O(nlogn)
int MaxSubArray2(vector<int> nums,int left,int right)
{
    int mid,maxleft,maxright;
    int tmp = 0,maxl = 0,maxr = 0;

    if(right-left == 0) return nums[left];
    else{
        mid = (left + right) / 2;
        maxleft = MaxSubArray2(nums,left,mid);
        maxright = MaxSubArray2(nums,mid + 1,right);
        //计算跨边界左半部分最大值
        for(int i = mid; i >= left; i--){
            tmp = tmp + nums[i];
            if(tmp > maxl){
                maxl = tmp;
            }
        }
        tmp = 0;
        //计算跨边界右半部分最大值
        for(int i = mid + 1; i <= right; i++){
            tmp = tmp + nums[i];
            if(tmp > maxr){
                maxr = tmp;
            }
        }
        int c1 = (maxleft > maxright ? maxleft : maxright);
        int c2 = c1 > (maxl + maxr) ? c1 : (maxl + maxr);
        return c2;
    }
}

// 方法三 O(n)
int MaxSubArray3(vector<int> nums)
{
    int maxsum = 0,tmp = 0;
    for(int i = 0; i < nums.size(); i++){
        tmp = tmp + nums[i];
        if(tmp > maxsum){
            maxsum = tmp;
        }else if(tmp < 0){ //不可能使得后面的子序列更大，所以丢弃
            tmp = 0;
        }
    }
    return maxsum;
}



int main()
{
    int n,number;
    cin >> n;
    vector<int> a;
    for(int i = 0; i < n; i++){
        cin >> number;
        a.push_back(number);
    }
    //int maxsum = MaxSubArray3(a);
    int maxsum = MaxSubArray2(a,0,n-1);
    cout << maxsum;
    return 0;
}